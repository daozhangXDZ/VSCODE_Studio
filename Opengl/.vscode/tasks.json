{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Compile", // 任务名称，与launch.json的preLaunchTask相对应
            "command": "g++", // 要使用的编译器，C++用clang++；如果编译失败，改成gcc或g++试试，还有问题那就是你自己的代码有错误
            "args": [
                "${file}",
                "-o", // 指定输出文件名，不加该参数则默认输出a.exe，Linux下默认a.out
                "${fileDirname}/${fileBasenameNoExtension}.exe",
                "-g", // 生成和调试有关的信息
                "-Wall", // 开启额外警告
                "-static-libgcc", // 静态链接libgcc，一般都会加上
                //"--target=x86_64-w64-mingw", // clang的默认target为msvc，不加这一条就会找不到头文件；用gcc或者Linux则掉这一条
                "-std=c++17", // C++最新标准为c++17，或根据自己的需要进行修改
                "-I${workspaceFolder}/include",  // 添加编译时需要 include 到的文件路径
                "-L${workspaceFolder}/lib",         // 添加编译时需要 link 的库文件路径
                "-lglad",     // 添加编译时需要 link 的库文件，注意原文件名为 libglad.a 去掉 lib前缀和.a后缀，再加上 -l 即得到该参数
                "-lglfw3dll",// 同上，添加 link 文件 libglfw3dll.a
               // "${workspaceFolder}\\glad.c",      // 不知道为啥， libglad.a 似乎没有链接到，编译时总是提示 gladxxx undefined ... ，所以只好把 glad.c 放进来和源文件一起编译
                "${workspaceFolder}\\glfw3.dll",   // dll 库文件也要和源文件一起编译
                ], // 编译命令参数
            "type": "shell", // process是vsc把预定义变量和转义解析后直接全部传给command；shell相当于先打开shell再输入命令，所以args还会经过shell再解析一遍
            "group": {
                "kind": "build",
                "isDefault": true // 不为true时ctrl shift B就要手动选择了
            },
            "presentation": {
                "echo": true,
                "reveal": "always", // 执行任务时是否跳转到终端面板，可以为always，silent，never。具体参见VSC的文档
                "focus": false, // 设为true后可以使执行task时焦点聚集在终端，但对编译C/C++来说，设为true没有意义
                "panel": "shared" // 不同的文件的编译信息共享一个终端面板
            }
            // "problemMatcher":"$gcc" // 此选项可以捕捉编译时终端里的报错信息；本文用的是clang，开了可能会出现双重报错信息；只用cpptools可以考虑启用
        }
    ]
}